## This is the first homework
#I add this line in a separate bran
 #1)

# I begin by downloading the required data and decompressing it using the commands
wget https://downloads.yeastgenome.org/sequence/S288C_reference/genome_releases/S288C_reference_genome_Current_Release.tgz

### followed by 
tar -xzvf S288C_reference_genome_Current_Release.tgz
### now i rename the created directory "data" for convenience, i will try not to upload these files to github

mv S288C_reference_genome_R64-2-1_20150113 data
## move in to new  directory
cd data
## now i try to count the number of genes, as follows. note that gene is written in column 3 of gff file

grep -w "chrII" saccharomyces_cerevisiae_R64-2-1_20150113.gff | cut -f 3 > col3.txt
## this extracts all coulmn 3 entries of lines which correspond to 2nd chromosome. We follow it by
grep -c "gene" col3.txt ### or alternatively grep "gene" col3.txt | wc -l 

# this gives the simple ouptut 479, which should be the number of genes in chrII. Note that all entries
## of column 3 which contain the word gene, e.g tRNAgene are also included, but I think they are genes. To count only gene exactly,
# one can run grep -cw "gene" col3.txt and obtain 456 matches...   

#2)

cd .. ### to get back to Homework directory
# To count the GC content, I use the following approach. I wish to delete all characters from the file except Gs and
# Cs, then count the number of characters. Note 2 things. The header is first removed using sed,
# and I believe a new line is interpreted as a character som i remove \n in the "tr -d" command. 
# the code to run is this

sed 's/>.*//' data/S288C_reference_sequence_R64-2-1_20150113.fsa | tr "G" "C" > ATGC.txt  # to remove header
tr -d "AT\n" < ATGC.txt | wc -m  # gives the count of G/C. -m is for characters.. and I removed all As, Ts and newline characters
## the value is 4637676. This was a very strange method, but could not make grep work.
## this command instead gives total number of bases, since it is all characters except the newline \n
tr -d "\n" < ATGC.txt | wc -m
# this amounts to 12157105 bases. This gives the percentage 38.1478649728 % GC content 



#3
#a)
  
### now to continue on the file Y55_JRIF00...., begin by fetching from internet and unzipping using gunzip
wget https://downloads.yeastgenome.org/sequence/strains/Y55/Y55_SGD_2015_JRIF00000000/Y55_JRIF00000000_SGD_cds.fsa.gz
gunzip Y55_JRIF00000000_SGD_cds.fsa.gz

## then i process it the same way, removing the header and then all characters except G and C as follows:

sed 's/>.*//' Y55_JRIF00000000_SGD_cds.fsa | tr "G" "C" > test.txt
tr -cd "GCgc" < test.txt | wc -c  
# this gives the count 3191977, thus the GC content is far less than in the previous exerise. Note THat the Y55 file contained some bases that were either N,n,g,c,a or t. 
# I removed everything except G,C,g and c from the file, since g and c only seem like mistakenly submittet Gs and Cs. The Ns were removed only from GC content count but not the total base count later on!

# this gives the total base content as in previous exerise, notably including Ns now! 
tr -d "\n" < test.txt | wc -m 
# it equates 8078658 bases, thus the percentage of GC in this genome is 3191977/8078658  39.5%, fairly similar to the previous..

# b) 

# to count the number of ORF:s I use the Grep functionality -c, which gives the output directly in the terminal, note that all ORFs are preceded by a <
grep -c ">" Y55_JRIF00000000_SGD_cds.fsa 
## more nicely, the result is 5330 :
echo "Number of ORFs in Y55.. is $(grep -c ">" Y55_JRIF00000000_SGD_cds.fsa)"

# this is in comparison to the reference strain where the number of ORFs is 6713, note that the file is
# in the data directory. 
echo "Number of ORFs in Reference is $(grep -c ">" data/orf_coding_all_R64-2-1_20150113.fasta)" 



#c)
# now for the final part, comparing 2 text files, namely the fasta from reference and fsa from y55

# this is how to get all unique orfs in the tested strain, for example YHL044N , note that i Removed ALL undefined sequences since they should not match anything.
grep ">" Y55_JRIF00000000_SGD_cds.fsa | sed 's/_.*//' | sed '/>UNDEF/d' | sort > orfs_Y55.txt 

# this is how to get the similar information form the reference, starting from the same directory as before. note that i cut with delimiter = space to get only first column containing the unique identifier.
grep ">" data/orf_coding_all_R64-2-1_20150113.fasta | cut -f 1 --delimiter=" " | sort > orfs_ref.txt 

## now to count the common entries in these files, I use the comm tool and paste the number of lines to the terminal via wc -l
comm -12 orfs_Y55.txt orfs_ref.txt | wc -l
# This equates 5168 common orfs. 
